import json
import sys
import os
import re
from socket import socket, AF_UNIX, SOCK_DGRAM

# Exit error codes
ERR_NO_REQUEST_MODULE   = 1
ERR_BAD_ARGUMENTS       = 2
ERR_BAD_MD5_SUM         = 3
ERR_NO_RESPONSE_API     = 4
ERR_SOCKET_OPERATION    = 5
ERR_FILE_NOT_FOUND      = 6
ERR_INVALID_JSON        = 7

try:
    import requests
    from requests.exceptions import Timeout
except Exception as e:
    print("No module 'requests' found. Install: pip install requests")
    sys.exit(ERR_NO_REQUEST_MODULE)

# Global vars
debug_enabled = False
timeout = 10
retries = 3
pwd = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))
json_alert = {}

# Log and socket path
LOG_FILE = f'{pwd}/logs/integrations.log'
SOCKET_ADDR = f'{pwd}/queue/sockets/queue'

# Constants
ALERT_INDEX = 1
TIMEOUT_INDEX = 6
RETRIES_INDEX = 7

def main(args):
    global debug_enabled
    global timeout
    global retries
    try:
        # Read arguments
        bad_arguments = False
        if len(args) >= 2:
            msg = '{0} {1} {2}'.format(
                args[1],
                args[2] if len(args) > 2 else '',
                args[3] if len(args) > 3 else '',
                args[TIMEOUT_INDEX] if len(args) > TIMEOUT_INDEX else timeout,
                args[RETRIES_INDEX] if len(args) > RETRIES_INDEX else retries,
            )
            debug_enabled = (len(args) > 3 and args[3] == 'debug')
            if len(args) > TIMEOUT_INDEX: timeout = int(args[TIMEOUT_INDEX])
            if len(args) > RETRIES_INDEX: retries = int(args[RETRIES_INDEX])
        else:
            msg = '# Error: Wrong arguments'
            bad_arguments = True

        # Logging the call
        with open(LOG_FILE, "a") as f:
            f.write(msg + '\n')

        if bad_arguments:
            debug("# Error: Exiting, bad arguments. Inputted: %s" % args)
            sys.exit(ERR_BAD_ARGUMENTS)

        # Core function
        process_args(args)

    except Exception as e:
        debug(str(e))
        raise

def process_args(args) -> None:
    debug("# Running SOC365 script")

    # Read args
    alert_file_location = args[ALERT_INDEX]

    # Load alert. Parse JSON object.
    json_alert = get_json_alert(alert_file_location)
    debug(f"# Opening alert file at '{alert_file_location}' with '{json_alert}'")

    # Request SOC365 info
    debug("# Requesting SOC365 information")
    msg = request_soc365_info(json_alert)

    if not msg:
        debug("# Error: Empty message")
        raise Exception

    send_msg(msg, json_alert["agent"])

def debug(msg: str) -> None:
    if debug_enabled:
        print(msg)
        with open(LOG_FILE, "a") as f:
            f.write(msg + '\n')

def request_soc365_info(alert: any):
    request_ok = False
    alert_output = {}
    alert_output["soc365"] = {}
    alert_output["integration"] = "soc365"

    if "syscheck" not in alert:
        debug("# No syscheck block present in the alert")
        return None

    if "md5_after" not in alert["syscheck"]:
        debug("# No md5 checksum present in the alert")
        return None

    if not (isinstance(alert["syscheck"]["md5_after"], str) and len(re.findall(r'\b([a-f\d]{32}|[A-F\d]{32})\b', alert["syscheck"]["md5_after"])) == 1):
        debug("# md5_after field in the alert is not a md5 hash checksum")
        return None

    for attempt in range(retries + 1):
        try:
            api_response_data = query_api(alert["syscheck"]["md5_after"])
            request_ok = True
            break
        except Timeout:
            debug("# Error: Request timed out. Remaining retries: %s" % (retries - attempt))
            continue
        except Exception as e:
            debug(str(e))
            sys.exit(ERR_NO_RESPONSE_API)

    if not request_ok:
        debug("# Error: Request timed out and maximum number of retries was exceeded")
        alert_output["soc365"]["error"] = 408
        alert_output["soc365"]["description"] = "Error: API request timed out"
        send_msg(alert_output)
        sys.exit(ERR_NO_RESPONSE_API)

    alert_output["soc365"]["found"] = 1
    alert_output["soc365"]["malicious"] = api_response_data['malware']
    alert_output["soc365"]["source"] = {}
    alert_output["soc365"]["source"]["alert_id"] = alert["id"]
    alert_output["soc365"]["source"]["file"] = alert["syscheck"]["path"]
    alert_output["soc365"]["source"]["md5"] = alert["syscheck"]["md5_after"]

    return alert_output

def query_api(md5_hash: str) -> any:
    api_url = 'https://api.soc365.com/malware'
    headers = {'Content-Type': 'application/json'}
    data = {'md5': md5_hash}

    debug("# Querying SOC365 API")
    response = requests.post(api_url, headers=headers, data=json.dumps(data), timeout=timeout)

    if response.status_code == 200:
        return response.json()
    else:
        alert_output = {}
        alert_output["soc365"] = {}
        alert_output["integration"] = "soc365"
        alert_output["soc365"]["error"] = response.status_code
        alert_output["soc365"]["description"] = "Error: API request failed"
        send_msg(alert_output)
        raise Exception(f"# Error: API request failed with status code {response.status_code}")

def send_msg(msg: any, agent: any = None) -> None:
    if not agent or agent["id"] == "000":
        string = '1:soc365:{0}'.format(json.dumps(msg))
    else:
        location = '[{0}] ({1}) {2}'.format(agent["id"], agent["name"], agent["ip"] if "ip" in agent else "any")
        location = location.replace("|", "||").replace(":", "|:")
        string = '1:{0}->soc365:{1}'.format(location, json.dumps(msg))

    debug("# Request result from SOC365 server: %s" % string)
    try:
        sock = socket(AF_UNIX, SOCK_DGRAM)
        sock.connect(SOCKET_ADDR)
        sock.send(string.encode())
        sock.close()
    except FileNotFoundError:
        debug("# Error: Unable to open socket connection at %s" % SOCKET_ADDR)
        sys.exit(ERR_SOCKET_OPERATION)

def get_json_alert(file_location: str) -> any:
    try:
        with open(file_location) as alert_file:
            return json.load(alert_file)
    except FileNotFoundError:
        debug("# JSON file for alert %s doesn't exist" % file_location)
        sys.exit(ERR_FILE_NOT_FOUND)
    except json.decoder.JSONDecodeError as e:
        debug("Failed getting JSON alert. Error: %s" % e)
        sys.exit(ERR_INVALID_JSON)

if __name__ == "__main__":
    main(sys.argv)
